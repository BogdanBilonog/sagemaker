#!/usr/bin/env python

from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf

import os
import json
import numpy as np


class NumpyEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (np.int_, np.intc, np.intp, np.int8,
            np.int16, np.int32, np.int64, np.uint8,
            np.uint16, np.uint32, np.uint64)):
            return int(obj)
        elif isinstance(obj, (np.float_, np.float16, np.float32, 
            np.float64)):
            return float(obj)
        elif isinstance(obj,(np.ndarray,)):
            return obj.tolist()
        return json.JSONEncoder.default(self, obj)

def load_data(channel):
    channel_path = os.path.join(data_path, channel)
    return (np.load(os.path.join(channel_path, 'x.npy')), np.load(os.path.join(channel_path, 'y.npy')))


if __name__ == '__main__':
    prefix = '/opt/ml/'
    input_path = os.path.join(prefix, 'input')
    data_path = os.path.join(input_path, 'data')
    output_path = os.path.join(prefix, 'output', 'data')
    model_path = os.path.join(prefix, 'model')

    with open(os.path.join(input_path, 'config', 'hyperparameters.json'), 'r') as file:
        hyperparameters = json.load(file)

    x_train, y_train = load_data('train')
    x_test, y_test = load_data('test')

    model = tf.keras.models.Sequential([
      tf.keras.layers.Flatten(input_shape=(28, 28)),
      tf.keras.layers.Dense(128, activation='relu'),
      tf.keras.layers.Dropout(0.2),
      tf.keras.layers.Dense(10, activation='softmax')
    ])

    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    history = model.fit(x_train, 
                        y_train, 
                        epochs=int(hyperparameters['epochs']))

    results = model.evaluate(x_test, 
                             y_test, 
                             verbose=2)

    model.save(os.path.join(model_path, 'export', 'Servo', '1'), save_format='tf')

    with open(os.path.join(output_path, 'history.json'), 'w') as file:
        json.dump(history.history, file, cls=NumpyEncoder)

    np.save(os.path.join(output_path, 'results.npy'), results)